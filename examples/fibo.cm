(main)

(:u8 char-of-num (:u8 n) (local)
  (ret (n + $0))
)

(:void print-num (:u8 n) (local :u8 code)
  (code <- char-of-num n)
  (! putchar code)
  (ret)
)

(:u8 mod10 (:u16 n) (local :u16 x)
  (x = ((n / #10) * #10))
  (ret ((n - x) as :u8)))

(:void print-int (:u16 n) (local :u8 last-digit)
  (ifte (n < #10) ((print-num (n as :u8))) (
    (last-digit <- mod10 n)
    (n = (n / #10))
    (print-int n)
    (print-num last-digit)
  ))
  (ret)
)

(:void newline () (local) (! putchar 10) (ret))

; n: number of fibonacci terms to compute
(:void fibo (:u8 n) (local :u16 x :u16 y :u16 tmp)
  (x = #1)
  (y = #1)
  (while (0 < n) (
    (tmp = x)
    (x = y)
    (y = (tmp + y))
    (print-int x)
    (newline)
    (n = (n - 1))
  ))
  (ret)
)

(:void main () (local)
  (fibo 20)
  (ret))

; $ ./main.exe fibo.cm > fibo.S && gcc -o fibo fibo.S
; $ ./fibo
; 1
; 2
; 3
; 5
; 8
; 13
; 21
; 34
; 55
; 89
; 144
; 233
; 377
; 610
; 987
; 1597
; 2584
; 4181
; 6765
; 10946
