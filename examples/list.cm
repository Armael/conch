(main)

(nil () (local) (ret 0))

(cons (x xs) (local cell cdr)
  (cell <- ! malloc 4)
  (cdr = (cell + 2))
  (cell := x)
  (cdr := xs)
  (ret cell))

(rev (l) (local prev next)
  (prev <- nil)
  (while l (
    (next = (* (l + 2)))
    ((l + 2) := prev)
    (prev = l)
    (l = next)
  ))
  (ret prev))

(print-list (xs) (local car cdr)
  (while xs (
    (car = (* xs))
    (cdr = (* (xs + 2)))
    (! putchar car)
    (xs = cdr)
  ))
  (ret))

(main () (local l)
  (l <- nil)
  (l <- cons $H l)
  (l <- cons $e l)
  (l <- cons $l l)
  (l <- cons $l l)
  (l <- cons $o l)
  (l <- rev l)
  (print-list l)
  (! putchar 10)
  (ret))

; $ ./list
; Hello
;
